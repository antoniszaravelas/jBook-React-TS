[{"/Users/antonis/Desktop/udemy-course/jBook-React-TS/jbook/src/index.tsx":"1","/Users/antonis/Desktop/udemy-course/jBook-React-TS/jbook/src/plugins/fetch-plugin.ts":"2","/Users/antonis/Desktop/udemy-course/jBook-React-TS/jbook/src/plugins/unpgk-path-plugin.ts":"3","/Users/antonis/Desktop/udemy-course/jBook-React-TS/jbook/src/components/code-editor.tsx":"4"},{"size":4254,"mtime":1675261243948,"results":"5","hashOfConfig":"6"},{"size":2436,"mtime":1675097034438,"results":"7","hashOfConfig":"6"},{"size":1740,"mtime":1675178904217,"results":"8","hashOfConfig":"6"},{"size":2457,"mtime":1675261967826,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"6yreb6",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/antonis/Desktop/udemy-course/jBook-React-TS/jbook/src/index.tsx",["20"],"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { useState, useEffect, useRef } from \"react\";\nimport * as esbuild from \"esbuild-wasm\";\nimport { unpkgPathPlugin } from \"./plugins/unpgk-path-plugin\";\nimport { fetchPlugin } from \"./plugins/fetch-plugin\";\nimport CodeEditor from \"./components/code-editor\";\nimport \"bulmaswatch/superhero/bulmaswatch.min.css\";\n\n/*\nthe problem with esbuild, is that it needs to bundle the modules with eachother\nwhich are locally on the file system, but also the modules that I import as npm \npackages. This cannot be done in the browser, because the browser has no access\nto the file system. So we have to do it in another way:\n\nwe need to fetch (intercept) when the esbuild bundler sees for example that we have\nimport react from \"react\", we need to fetch the source code of react and provide it to the \nESBUILD Bundler, so it can bundle it with the rest of our application in the browser\n\nnpm view react(or any other package) dist.tarball => this will give me the source code\nof the XXX package that I have written. \n*/\n\nconst App = () => {\n  const ref = useRef<any>();\n  const iframeRef = useRef<any>();\n  const [input, setInput] = useState(\"\");\n\n  //   actual initialisation\n  const startService = async () => {\n    ref.current = await esbuild.startService({\n      worker: true,\n      wasmURL: \"https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm\",\n      //   the URL says: go to public directory, find the file /esbuild.wasm\n    });\n  };\n\n  useEffect(() => {\n    startService();\n    // returns object that contains transform, build\n    // transform : it does transpiling\n    // build: for bundling\n  }, []);\n\n  const onClick = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    // ref.current contains what the function esbuild.startService returns, so the object with transform etc\n    // you can use a ref to keep a reference to any JS value inside of a component :o\n    if (!ref.current) return;\n\n    // doesn't matter if the variable has been defined before\n    iframeRef.current.srcdoc = html;\n\n    const result = await ref.current.build({\n      // means the index.js file is the first to be bundled, bundle it!\n      // 1. where is index.js? (onResolve step (see unpgk-path-plugin.ts))\n      // 2. load up the index.js file (onLoad step)\n      // 3. parse the index.js, find any import / require / exports\n      // 4. if you found imports/require/exports  , repeat steps 1 and 2\n      entryPoints: [\"index.js\"],\n      bundle: true,\n      write: false,\n      plugins: [unpkgPathPlugin(), fetchPlugin(input)],\n      define: {\n        \"process.env.NODE_ENV\": '\"production\"',\n        // we put ' \" otherwise it would have been evaluated as a value 'development'\n        // and not string\n        global: \"window\",\n      },\n    });\n    // contentWindow returns the Window object of an HTMLIFrameElement\n    iframeRef.current.contentWindow.postMessage(\n      // this is the bundled code\n      result.outputFiles[0].text,\n      \"*\"\n    );\n  };\n\n  const html = `\n  <html>\n    <head></head>\n    <body>\n        <div id=\"root\"></div>\n        <script>\n            window.addEventListener(\"message\", (event)=>{\n                try{\n                    eval(event.data);\n                }catch(e){\n                   document.querySelector(\"#root\").innerHTML = '<div>' + e+ '</div>';\n                   console.error(e);\n                }\n            },false)\n        </script>\n    </body>\n  </html>\n  `;\n\n  const onCodeChange = (cc: string) => {};\n\n  return (\n    <>\n      {/* <h1>Type code here:</h1> */}\n      {/* <textarea\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        style={{ width: \"400px\", height: \"150px\" }}\n      ></textarea> */}\n\n      <CodeEditor\n        onChange={(inputCode) => onCodeChange(inputCode)}\n        initialValue=\"const a =1\"\n      />\n      <br />\n      <button style={{ display: \"block\" }} onClick={onClick}>\n        Submit\n      </button>\n      <iframe\n        title=\"codePreview\"\n        ref={iframeRef}\n        srcDoc={html}\n        sandbox=\"allow-scripts\"\n      ></iframe>\n    </>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","/Users/antonis/Desktop/udemy-course/jBook-React-TS/jbook/src/plugins/fetch-plugin.ts",[],"/Users/antonis/Desktop/udemy-course/jBook-React-TS/jbook/src/plugins/unpgk-path-plugin.ts",[],"/Users/antonis/Desktop/udemy-course/jBook-React-TS/jbook/src/components/code-editor.tsx",["21"],"import MonacoEditor, { monaco } from \"@monaco-editor/react\";\nimport { EditorDidMount } from \"@monaco-editor/react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\nimport { useRef } from \"react\";\nimport \"./code-editor.css\";\nimport \"./syntax.css\";\n\n// for the highlighting in the Code Editor I have\nimport Highlighter from \"monaco-jsx-highlighter\";\nimport codeShift from \"jscodeshift\";\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange: (value: string) => void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ initialValue, onChange }) => {\n  const monacoRef = useRef<any>();\n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n    // getValue finds the text in the editor\n    monacoRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      // whenever the contents of the editor change in any way\n      onChange(getValue());\n    });\n\n    // so a tabSize is 2 spaces and not 4\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2 });\n\n    const highlighter = new Highlighter(\n      // @ts-ignore\n      window.monaco,\n      codeShift,\n      monacoEditor\n    );\n    highlighter.highLightOnDidChangeModelContent(\n      () => {},\n      () => {},\n      undefined,\n      () => {}\n    );\n  };\n\n  const onFormatClick = () => {\n    // get current value from the editor\n    const unformatted = monacoRef.current.getModel().getValue();\n    // format this value\n    const formatted = prettier\n      .format(unformatted, {\n        parser: \"babel\",\n        plugins: [parser],\n        useTabs: false,\n        semi: true,\n        singleQuote: true,\n      })\n      .replace(/\\n$/, \"\");\n    // set the formatted value back in the editor\n    monacoRef.current.setValue(formatted);\n  };\n  return (\n    <div className=\"editor-wrapper\">\n      <button\n        className=\"button button-format is-primary is-small\"\n        onClick={onFormatClick}\n      >\n        Format\n      </button>\n      <MonacoEditor\n        editorDidMount={onEditorDidMount}\n        value={initialValue}\n        options={{\n          wordWrap: \"on\",\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n        }}\n        theme=\"dark\"\n        language=\"javascript\"\n        height=\"300px\"\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n",{"ruleId":"22","severity":1,"message":"23","line":27,"column":17,"nodeType":"24","messageId":"25","endLine":27,"endColumn":25},{"ruleId":"22","severity":1,"message":"26","line":1,"column":24,"nodeType":"24","messageId":"25","endLine":1,"endColumn":30},"@typescript-eslint/no-unused-vars","'setInput' is assigned a value but never used.","Identifier","unusedVar","'monaco' is defined but never used."]